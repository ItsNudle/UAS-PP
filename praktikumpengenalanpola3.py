# -*- coding: utf-8 -*-
"""PraktikumPengenalanPola3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19BQfRfYlE6UDinkowd69K0KLKtfTwdpQ
"""

pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

zoo = fetch_ucirepo(id=111)

x = zoo.data.features
y = zoo.data.targets

x

y

zoo.metadata

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

columns = [
    'animal_name', 'hair', 'feathers', 'eggs', 'milk',
    'airborne', 'aquatic','predator','toothed',
    'backbone','breathes','venomous','fins',
    'legs','tail','domestic','catsize','type']

df = pd.read_csv('zoo.data',header=None,names=columns)

print(df.head())

x = df.drop(['type','animal_name'],axis=1)
x.head()

y = df['type']

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=20,random_state = 5)

zoo_model = GaussianNB()

NB_train = zoo_model.fit(x_train,y_train)

y_pred = NB_train.predict(x_test)
np.array(y_pred)

import itertools
from sklearn.metrics import confusion_matrix

def plot_confusion_matrix(cm, title='Confusion matrix', cmap=plt.cm.Blues):
  plt.imshow(cm, interpolation='nearest', cmap=cmap)
  plt.title(title)
  plt.colorbar()
  tick_marks = np.arange(len(list(range(1,8))))
  plt.xticks(tick_marks, rotation=45)
  ax = plt.gca()
  ax.set_xticklabels((ax.get_xticks() +1).astype(str))
  plt.yticks(tick_marks)
  ax.set_yticklabels((ax.get_yticks() +1).astype(str))

  thresh = cm.max() / 2.
  for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
    plt.text(j, i, format(cm[i, j], '.1f'),
    horizontalalignment="center",
    color="white" if cm[i, j] > thresh else "black")

cm = confusion_matrix(y_test, y_pred)
np.set_printoptions(precision=1) #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
print('Confusion matrix, without normalization')
print(cm)
fig, ax = plt.subplots()
plot_confusion_matrix(cm)

plt.show()

print(classification_report(y_test,y_pred))
